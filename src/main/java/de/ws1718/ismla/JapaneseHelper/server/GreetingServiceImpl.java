package de.ws1718.ismla.JapaneseHelper.server;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;

import com.google.gwt.user.server.rpc.RemoteServiceServlet;

import de.ws1718.ismla.JapaneseHelper.client.GreetingService;
import de.ws1718.ismla.JapaneseHelper.shared.InflectedToken;
import de.ws1718.ismla.JapaneseHelper.shared.Token;

/**
 * The server side implementation of the RPC service.
 */
@SuppressWarnings("serial")
public class GreetingServiceImpl extends RemoteServiceServlet implements GreetingService {
	private static final Logger logger = Logger.getLogger(GreetingServiceImpl.class.getSimpleName());

	// requires the file inside the directory to have been generated by
	// WiktionaryPreprocessor
	private static final String DICTIONARY_GENERATED_PATH = "/WEB-INF/dictionary-full";
	private Set<Token> tokens;

	public String greetServer(String input) throws IllegalArgumentException {
		readTokens();
		return "done";
	}

	private void readTokens() {
		tokens = new HashSet<>();
		String line;
		List<String> dictFileList = new ArrayList<String>(
				getServletContext().getResourcePaths(DICTIONARY_GENERATED_PATH));
		// size == 1
		String dictFile = dictFileList.get(0);
		try (InputStream stream = getServletContext().getResourceAsStream(dictFile);
				BufferedReader br = new BufferedReader(new InputStreamReader(stream, "UTF-8"))) {
			while ((line = br.readLine()) != null) {
				line = line.trim();
				if (line.startsWith("ï»¿##") || line.startsWith("##")) {
					// the first version contains control characters
					continue;
				}
				String[] fields = line.split("\t");

				Token tok = null;
				if (fields.length == 4) {
					tok = new Token(fields[0], fields[1], fields[2], fields[3]);
				} else if (fields.length == 6) {
					tok = new InflectedToken(fields[0], fields[1], fields[2], fields[3], fields[4], fields[5]);
				} else {
					continue;
				}
				logger.info(tok.toString());
				tokens.add(tok);
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		logger.info("read tokens");
	}
}
